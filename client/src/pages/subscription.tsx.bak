import React, { useState, useEffect, useCallback } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Badge } from '../components/ui/badge';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { 
  Check, 
  Crown, 
  Star, 
  Shield, 
  CreditCard, 
  Clock, 
  Users, 
  Smartphone,
  Monitor,
  Tv,
  Loader2,
  QrCode,
  Copy,
  ExternalLink,
  CheckCircle,
  XCircle,
  AlertCircle,
  Zap,
  RefreshCw,
  Info,
  Timer,
  Wallet,
  Play,
  Download,
  Globe
} from 'lucide-react';

interface SubscriptionPlan {
  name: string;
  description: string;
  amount: number;
  duration: number;
}

interface CustomerInfo {
  name: string;
  email: string;
  phone?: string;
}

const SubscriptionPage: React.FC = () => {
  const [selectedPlan, setSelectedPlan] = useState<string>('');
  const [customerInfo, setCustomerInfo] = useState<CustomerInfo>({
    name: '',
    email: '',
    phone: ''
  });
  const [isProcessing, setIsProcessing] = useState(false);
  const [paymentInvoice, setPaymentInvoice] = useState<any>(null);
  const [paymentStatus, setPaymentStatus] = useState<string>('pending');
  const [statusMessage, setStatusMessage] = useState<string>('En attente du paiement...');
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch subscription plans
  const { data: plans, isLoading: plansLoading } = useQuery({
    queryKey: ['/api/subscription/plans'],
    queryFn: async () => {
      const response = await fetch('/api/subscription/plans');
      if (!response.ok) throw new Error('Failed to fetch plans');
      return response.json();
    }
  });

  // Fetch current subscription
  const { data: currentSubscription } = useQuery({
    queryKey: ['/api/subscription/current'],
    queryFn: async () => {
      const token = localStorage.getItem('auth_token');
      const response = await fetch('/api/subscription/current', {
        credentials: 'include',
        headers: {
          ...(token ? { 'Authorization': `Bearer ${token}` } : {}),
        },
      });
      if (!response.ok) throw new Error('Failed to fetch current subscription');
      return response.json();
    }
  });

  // Fetch payment history
  const { data: paymentHistory } = useQuery({
    queryKey: ['/api/subscription/payment-history'],
    queryFn: async () => {
      const token = localStorage.getItem('auth_token');
      const response = await fetch('/api/subscription/payment-history', {
        credentials: 'include',
        headers: {
          ...(token ? { 'Authorization': `Bearer ${token}` } : {}),
        },
      });
      if (!response.ok) throw new Error('Failed to fetch payment history');
      return response.json();
    }
  });

  // Create payment invoice mutation
  const createPaymentMutation = useMutation({
    mutationFn: async ({ planId, customerInfo }: { planId: string; customerInfo: CustomerInfo }) => {
      const token = localStorage.getItem('auth_token');
      const response = await fetch('/api/subscription/create-payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(token ? { 'Authorization': `Bearer ${token}` } : {}),
        },
        credentials: 'include',
        body: JSON.stringify({ planId, customerInfo }),
      });
      
      if (!response.ok) {
        const errorData = await response.text();
        console.error('Payment creation failed:', response.status, errorData);
        throw new Error(`Failed to create payment: ${response.status} - ${errorData}`);
      }
      
      return response.json();
    },
    onSuccess: (data) => {
      console.log('Payment response:', data);
      if (data.success) {
        setPaymentInvoice(data);
        setPaymentStatus('pending');
        setStatusMessage('⏳ En attente du paiement...');
        console.log('QR code received:', data.qr_code ? 'Yes' : 'No');
        toast({
          title: "Facture créée",
          description: "Votre facture de paiement a été créée. Le suivi en temps réel est activé.",
        });
      }
    },
    onError: (error: any) => {
      toast({
        title: "Erreur",
        description: error.message || "Erreur lors de la création du paiement",
        variant: "destructive",
      });
    }
  });

  const handlePlanSelection = (planId: string) => {
    setSelectedPlan(planId);
  };

  const handlePayment = async () => {
    if (!selectedPlan) {
      toast({
        title: "Plan requis",
        description: "Veuillez sélectionner un plan d'abonnement",
        variant: "destructive",
      });
      return;
    }

    if (!customerInfo.name || !customerInfo.email) {
      toast({
        title: "Informations manquantes", 
        description: "Veuillez remplir votre nom et email",
        variant: "destructive",
      });
      return;
    }

    setIsProcessing(true);
    try {
      await createPaymentMutation.mutateAsync({ planId: selectedPlan, customerInfo });
    } finally {
      setIsProcessing(false);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copié",
        description: "Lien de paiement copié dans le presse-papiers",
      });
    } catch (err) {
      toast({
        title: "Erreur",
        description: "Impossible de copier le lien",
        variant: "destructive",
      });
    }
  };

  // Function to check payment status
  const checkPaymentStatus = useCallback(async (token: string) => {
    try {
      const response = await fetch(`/api/check-payment/${token}`);
      const data = await response.json();
      
      console.log('Payment status check:', data);
      
      if (data.status === 'completed') {
        setPaymentStatus('completed');
        setStatusMessage('✅ Paiement validé avec succès !');
        toast({
          title: "Paiement réussi",
          description: "Votre abonnement a été activé avec succès.",
        });
        queryClient.invalidateQueries({ queryKey: ['/api/subscription/current'] });
        return true;
      } else if (data.status === 'pending') {
        setPaymentStatus('pending');
        setStatusMessage('⏳ En attente du paiement...');
        return false;
      } else if (data.status === 'cancelled') {
        setPaymentStatus('cancelled');
        setStatusMessage('❌ Paiement annulé');
        return true;
      } else if (data.status === 'failed') {
        setPaymentStatus('failed');
        setStatusMessage('❌ Paiement échoué');
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Error checking payment status:', error);
      return false;
    }
  }, [toast, queryClient]);

  // Polling effect for payment status
  useEffect(() => {
    if (!paymentInvoice?.invoice_token || paymentStatus === 'completed' || paymentStatus === 'cancelled' || paymentStatus === 'failed') {
      return;
    }

    console.log('Starting payment polling for token:', paymentInvoice.invoice_token);
    
    const pollInterval = setInterval(async () => {
      const isFinished = await checkPaymentStatus(paymentInvoice.invoice_token);
      if (isFinished) {
        clearInterval(pollInterval);
      }
    }, 5000);

    checkPaymentStatus(paymentInvoice.invoice_token);

    return () => {
      console.log('Clearing payment polling interval');
      clearInterval(pollInterval);
    };
  }, [paymentInvoice?.invoice_token, paymentStatus, checkPaymentStatus]);

  const planFeatures = {
    basic: [
      'Accès à tout le contenu',
      'Qualité Standard (SD)',
      '1 appareil simultané',
      'Support client'
    ],
    standard: [
      'Accès à tout le contenu',
      'Qualité HD',
      '2 appareils simultanés',
      'Téléchargement hors ligne',
      'Support prioritaire'
    ],
    premium: [
      'Accès à tout le contenu',
      'Qualité 4K Ultra HD',
      '4 appareils simultanés',
      'Téléchargement illimité',
      'Support VIP 24/7',
      'Contenu exclusif'
    ]
  };

  const planIcons = {
    basic: <Shield className="w-6 h-6" />,
    standard: <Star className="w-6 h-6" />,
    premium: <Crown className="w-6 h-6" />
  };

  if (plansLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-red-900 flex justify-center items-center">
        <Loader2 className="w-12 h-12 animate-spin text-red-500" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-red-900">
      {/* Hero Section - Style Netflix */}
      <div className="relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-red-600/20 to-black/40"></div>
        <div className="relative container mx-auto px-4 pt-20 pb-16">
          <div className="text-center max-w-4xl mx-auto">
            <h1 className="text-5xl md:text-6xl font-bold text-white mb-6">
              Choisissez votre plan
            </h1>
            <p className="text-xl md:text-2xl text-gray-300 mb-8">
              Regardez partout. Annulez à tout moment.
            </p>
            <div className="flex flex-wrap justify-center gap-6 text-white">
              <div className="flex items-center gap-2">
                <Check className="w-6 h-6 text-red-500" />
                <span>Pas de publicités</span>
              </div>
              <div className="flex items-center gap-2">
                <Check className="w-6 h-6 text-red-500" />
                <span>Annulation facile</span>
              </div>
              <div className="flex items-center gap-2">
                <Check className="w-6 h-6 text-red-500" />
                <span>Regardez partout</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 pb-16 max-w-7xl">
        {/* Current Subscription Status */}
        {currentSubscription?.subscription && (
          <div className="mb-12">
            <Card className="bg-green-900/30 border-green-500/30 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="text-green-400 flex items-center gap-2">
                  <CheckCircle className="w-5 h-5" />
                  Abonnement actuel
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium text-white">
                      Plan {currentSubscription.subscription.planId.charAt(0).toUpperCase() + 
                           currentSubscription.subscription.planId.slice(1)}
                    </p>
                    <p className="text-sm text-gray-300">
                      Expire le {new Date(currentSubscription.subscription.endDate).toLocaleDateString('fr-FR')}
                    </p>
                  </div>
                  <Badge className="bg-green-500/20 text-green-400 border-green-500/30">
                    Actif
                  </Badge>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Subscription Plans - Style Netflix */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-16">
          {plans && Object.entries(plans).map(([planId, plan]: [string, any]) => {
            const isPopular = planId === 'standard';
            const isPremium = planId === 'premium';
            
            return (
              <div key={planId} className="relative">
                {isPopular && (
                  <div className="absolute -top-4 left-1/2 transform -translate-x-1/2 z-10">
                    <Badge className="bg-red-600 text-white px-4 py-1 text-sm font-medium">
                      Le plus populaire
                    </Badge>
                  </div>
                )}
                
                <Card 
                  className={`relative cursor-pointer transition-all duration-300 overflow-hidden group ${
                    selectedPlan === planId 
                      ? 'border-red-500 bg-red-900/20 shadow-2xl shadow-red-500/25 scale-105' 
                      : 'bg-gray-900/50 border-gray-700 hover:border-gray-600 hover:bg-gray-800/50'
                  } ${isPopular ? 'lg:scale-110' : ''} backdrop-blur-sm`}
                  onClick={() => handlePlanSelection(planId)}
                >
                  <div className={`absolute inset-0 bg-gradient-to-br opacity-10 ${
                    isPremium ? 'from-yellow-400 to-orange-600' :
                    isPopular ? 'from-red-500 to-pink-600' :
                    'from-blue-500 to-cyan-600'
                  }`}></div>
                  
                  <CardHeader className="text-center relative z-10 pb-4">
                    <div className={`mx-auto mb-4 p-4 rounded-full ${
                      isPremium ? 'bg-gradient-to-br from-yellow-500 to-orange-600' :
                      isPopular ? 'bg-gradient-to-br from-red-500 to-pink-600' :
                      'bg-gradient-to-br from-blue-500 to-cyan-600'
                    }`}>
                      {planIcons[planId as keyof typeof planIcons] && 
                        React.cloneElement(planIcons[planId as keyof typeof planIcons], {
                          className: 'w-8 h-8 text-white'
                        })
                      }
                    </div>
                    <CardTitle className="text-2xl font-bold text-white mb-2">{plan.name}</CardTitle>
                    <CardDescription className="text-gray-300 text-base">{plan.description}</CardDescription>
                    <div className="mt-6">
                      <div className="text-4xl font-bold text-white">{plan.amount.toLocaleString('fr-FR')}</div>
                      <div className="text-gray-400 text-lg">FCFA/mois</div>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="relative z-10">
                    <ul className="space-y-4 mb-8">
                      {planFeatures[planId as keyof typeof planFeatures].map((feature, index) => (
                        <li key={index} className="flex items-center gap-3">
                          <div className="flex-shrink-0">
                            <Check className="w-5 h-5 text-red-500" />
                          </div>
                          <span className="text-gray-300">{feature}</span>
                        </li>
                      ))}
                    </ul>
                    
                    <Button 
                      className={`w-full py-3 text-lg font-semibold transition-all duration-300 ${
                        selectedPlan === planId
                          ? 'bg-red-600 hover:bg-red-700 text-white'
                          : 'bg-white text-black hover:bg-gray-200'
                      }`}
                      onClick={(e) => {
                        e.stopPropagation();
                        handlePlanSelection(planId);
                      }}
                    >
                      {selectedPlan === planId ? (
                        <>
                          <Check className="w-5 h-5 mr-2" />
                          Sélectionné
                        </>
                      ) : (
                        'Choisir ce plan'
                      )}
                    </Button>
                  </CardContent>
                </Card>
              </div>
            );
          })}
        </div>

        {/* Customer Information Form - Style Netflix */}
        {selectedPlan && (
          <Card className="mb-12 bg-gray-900/50 border-gray-700 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="text-white text-2xl">Informations de paiement</CardTitle>
              <CardDescription className="text-gray-300 text-lg">
                Sécurisé et crypté pour votre protection
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <Label htmlFor="name" className="text-white text-base font-medium">Nom complet *</Label>
                  <Input
                    id="name"
                    value={customerInfo.name}
                    onChange={(e) => setCustomerInfo(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="Votre nom complet"
                    className="mt-2 bg-gray-800/50 border-gray-600 text-white placeholder-gray-400 focus:border-red-500 focus:ring-red-500/20 h-12"
                  />
                </div>
                
                <div>
                  <Label htmlFor="email" className="text-white text-base font-medium">Email *</Label>
                  <Input
                    id="email"
                    type="email"
                    value={customerInfo.email}
                    onChange={(e) => setCustomerInfo(prev => ({ ...prev, email: e.target.value }))}
                    placeholder="votre@email.com"
                    className="mt-2 bg-gray-800/50 border-gray-600 text-white placeholder-gray-400 focus:border-red-500 focus:ring-red-500/20 h-12"
                  />
                </div>
                
                <div className="md:col-span-2">
                  <Label htmlFor="phone" className="text-white text-base font-medium">Téléphone (optionnel)</Label>
                  <Input
                    id="phone"
                    value={customerInfo.phone}
                    onChange={(e) => setCustomerInfo(prev => ({ ...prev, phone: e.target.value }))}
                    placeholder="+225 XX XX XX XX XX"
                    className="mt-2 bg-gray-800/50 border-gray-600 text-white placeholder-gray-400 focus:border-red-500 focus:ring-red-500/20 h-12"
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Payment Section - Style Netflix */}
        {selectedPlan && !paymentInvoice && (
          <Card className="bg-gray-900/50 border-gray-700 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-3 text-white text-2xl">
                <CreditCard className="w-8 h-8 text-red-500" />
                Finaliser votre abonnement
              </CardTitle>
              <CardDescription className="text-gray-300 text-lg">
                Paiement sécurisé et crypté avec Lygos
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-8">
                <div className="p-6 bg-gradient-to-r from-red-900/30 to-pink-900/30 rounded-xl border border-red-500/30">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-2xl font-bold text-white">
                        Plan {selectedPlan.charAt(0).toUpperCase() + selectedPlan.slice(1)}
                      </h3>
                      <p className="text-gray-300 text-lg">Abonnement mensuel</p>
                    </div>
                    <div className="text-right">
                      <div className="text-3xl font-bold text-white">
                        {plans?.[selectedPlan]?.amount.toLocaleString('fr-FR')} FCFA
                      </div>
                      <div className="text-gray-300">par mois</div>
                    </div>
                  </div>
                </div>

                <div className="text-center py-8">
                  <div className="flex items-center justify-center gap-4 mb-6">
                    <div className="w-16 h-16 bg-gradient-to-r from-red-500 to-pink-600 rounded-2xl flex items-center justify-center shadow-2xl">
                      <Zap className="w-8 h-8 text-white" />
                    </div>
                    <div className="text-left">
                      <div className="text-2xl font-bold bg-gradient-to-r from-red-500 to-pink-500 bg-clip-text text-transparent">
                        Lygos Pay
                      </div>
                      <div className="text-gray-400">Paiement mobile sécurisé</div>
                    </div>
                  </div>
                  
                  <div className="flex flex-wrap justify-center gap-4 mb-8">
                    <div className="flex items-center gap-2 bg-gray-800/50 px-4 py-2 rounded-full border border-gray-600">
                      <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="text-sm font-medium text-green-400">SSL Sécurisé</span>
                    </div>
                    <div className="flex items-center gap-2 bg-gray-800/50 px-4 py-2 rounded-full border border-gray-600">
                      <Shield className="w-4 h-4 text-blue-400" />
                      <span className="text-sm font-medium text-blue-400">Crypté</span>
                    </div>
                  </div>

                  <Button 
                    onClick={handlePayment}
                    disabled={isProcessing}
                    className="w-full py-4 text-xl font-bold bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white border-0 rounded-xl shadow-2xl transition-all duration-300 transform hover:scale-105"
                    size="lg"
                  >
                    {isProcessing ? (
                      <>
                        <Loader2 className="w-6 h-6 animate-spin mr-3" />
                        Traitement en cours...
                      </>
                    ) : (
                      <>
                        <CreditCard className="w-6 h-6 mr-3" />
                        Commencer mon abonnement
                      </>
                    )}
                  </Button>

                  <div className="mt-6 text-center">
                    <p className="text-sm text-gray-400">
                      En continuant, vous acceptez nos{' '}
                      <a href="/terms" className="text-red-400 hover:text-red-300 underline">conditions d'utilisation</a>{' '}
                      et notre{' '}
                      <a href="/privacy" className="text-red-400 hover:text-red-300 underline">politique de confidentialité</a>.
                    </p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Payment History - Style Netflix */}
        {paymentHistory?.payments && paymentHistory.payments.length > 0 && (
          <Card className="mt-12 bg-gray-900/50 border-gray-700 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-3 text-white text-2xl">
                <Clock className="w-8 h-8 text-red-500" />
                Historique des paiements
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {paymentHistory.payments.slice(0, 5).map((payment: any, index: number) => (
                  <div key={`payment-${payment.id || index}-${payment.createdAt || Date.now()}`} className="flex items-center justify-between p-4 bg-gray-800/30 border border-gray-700 rounded-xl">
                    <div>
                      <p className="font-semibold text-white text-lg">
                        {payment.amount?.toLocaleString('fr-FR') || '0'} FCFA
                      </p>
                      <p className="text-gray-400">
                        {payment.createdAt ? new Date(payment.createdAt).toLocaleDateString('fr-FR') : 'Date inconnue'} • {payment.method || 'Méthode inconnue'}
                      </p>
                    </div>
                    <Badge 
                      className={payment.status === 'success' ? 'bg-green-500/20 text-green-400 border-green-500/30' : 'bg-red-500/20 text-red-400 border-red-500/30'}
                    >
                      {payment.status === 'success' ? 'Réussi' : 'Échec'}
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
};

export default SubscriptionPage;