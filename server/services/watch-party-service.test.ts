import watchPartyService from './watch-party-service';

// Script de test simple pour le service Watch Party
async function runTests() {
  console.log('üß™ D√©marrage des tests pour WatchPartyService...\n');

  try {
    // Test 1: Cr√©ation d'une nouvelle salle
    console.log('Test 1: Cr√©ation d\'une nouvelle salle');
    const room = watchPartyService.createRoom('user1', 'User One', 'socket1', 'https://example.com/video.mp4');
    
    if (room && room.id && room.host === 'user1' && room.currentVideo === 'https://example.com/video.mp4') {
      console.log('‚úÖ Test 1 r√©ussi: Salle cr√©√©e avec succ√®s\n');
    } else {
      console.log('‚ùå Test 1 √©chou√©: Probl√®me lors de la cr√©ation de la salle\n');
    }

    // Test 2: Rejoindre une salle existante
    console.log('Test 2: Rejoindre une salle existante');
    const joinedRoom = watchPartyService.joinRoom(room.id, 'user2', 'User Two', 'socket2');
    
    if (joinedRoom && joinedRoom.id === room.id && joinedRoom.participants.size === 2) {
      console.log('‚úÖ Test 2 r√©ussi: Utilisateur a rejoint la salle\n');
    } else {
      console.log('‚ùå Test 2 √©chou√©: Probl√®me lors du rejoindre la salle\n');
    }

    // Test 3: Quitter une salle
    console.log('Test 3: Quitter une salle');
    const leaveResult = watchPartyService.leaveRoom('user2');
    
    if (leaveResult && leaveResult.room.participants.size === 1) {
      console.log('‚úÖ Test 3 r√©ussi: Utilisateur a quitt√© la salle\n');
    } else {
      console.log('‚ùå Test 3 √©chou√©: Probl√®me lors du quitter la salle\n');
    }

    // Test 4: Synchronisation de la lecture
    console.log('Test 4: Synchronisation de la lecture');
    const playResult = watchPartyService.syncVideoPlay(room.id, 'user1', 120);
    
    if (playResult && playResult.shouldSync && playResult.room.isPlaying && playResult.room.currentTime === 120) {
      console.log('‚úÖ Test 4 r√©ussi: Synchronisation de la lecture\n');
    } else {
      console.log('‚ùå Test 4 √©chou√©: Probl√®me lors de la synchronisation de la lecture\n');
    }

    // Test 5: Synchronisation de la pause
    console.log('Test 5: Synchronisation de la pause');
    const pauseResult = watchPartyService.syncVideoPause(room.id, 'user1', 125);
    
    if (pauseResult && pauseResult.shouldSync && !pauseResult.room.isPlaying && pauseResult.room.currentTime === 125) {
      console.log('‚úÖ Test 5 r√©ussi: Synchronisation de la pause\n');
    } else {
      console.log('‚ùå Test 5 √©chou√©: Probl√®me lors de la synchronisation de la pause\n');
    }

    // Test 6: Changer de vid√©o
    console.log('Test 6: Changer de vid√©o');
    const changeVideoResult = watchPartyService.changeVideo(room.id, 'user1', 'https://example.com/new-video.mp4', 'New Video');
    
    if (changeVideoResult && changeVideoResult.isAuthorized && changeVideoResult.room.currentVideo === 'https://example.com/new-video.mp4') {
      console.log('‚úÖ Test 6 r√©ussi: Changement de vid√©o\n');
    } else {
      console.log('‚ùå Test 6 √©chou√©: Probl√®me lors du changement de vid√©o\n');
    }

    // Test 7: Envoyer un message
    console.log('Test 7: Envoyer un message');
    const message = watchPartyService.sendMessage(room.id, 'user1', 'User One', 'Hello everyone!');
    
    if (message && message.message === 'Hello everyone!') {
      console.log('‚úÖ Test 7 r√©ussi: Message envoy√©\n');
    } else {
      console.log('‚ùå Test 7 √©chou√©: Probl√®me lors de l\'envoi du message\n');
    }

    // Test 8: Obtenir les statistiques
    console.log('Test 8: Obtenir les statistiques');
    const stats = watchPartyService.getStats();
    
    if (stats) {
      console.log(`‚úÖ Test 8 r√©ussi: Statistiques r√©cup√©r√©es - ${stats.roomCount} salles, ${stats.participantCount} participants\n`);
    } else {
      console.log('‚ùå Test 8 √©chou√©: Probl√®me lors de la r√©cup√©ration des statistiques\n');
    }

    console.log('üéâ Tous les tests ont √©t√© ex√©cut√©s!');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des tests:', error);
  }
}

// Ex√©cuter les tests si le script est lanc√© directement
if (require.main === module) {
  runTests();
}

export default runTests;
