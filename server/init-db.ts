import { config } from "dotenv";
import { Client } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from "@shared/schema";
import { join } from "path";
import { readdir } from "fs/promises";
import { pathToFileURL } from 'url';
import { fileURLToPath } from 'url';

// Obtenir __dirname dans un module ES
const __filename = fileURLToPath(import.meta.url);
const __dirname = fileURLToPath(new URL('.', import.meta.url));

// Charger les variables d'environnement
config();

async function initDatabase() {
  console.log("üîß Initialisation de la base de donn√©es...");
  
  const databaseUrl = process.env.DATABASE_URL;
  if (!databaseUrl) {
    console.error("‚ùå DATABASE_URL n'est pas d√©finie dans .env");
    process.exit(1);
  }
  
  // Extraire les composants de l'URL
  const url = new URL(databaseUrl);
  const dbName = url.pathname.substring(1);
  const dbUser = url.username;
  const dbPassword = url.password;
  const dbHost = url.hostname;
  const dbPort = url.port;
  
  console.log(`üìç Configuration: ${dbUser}@${dbHost}:${dbPort}/${dbName}`);
  
  // Cr√©er une connexion sans sp√©cifier la base de donn√©es pour cr√©er la base
  const adminClient = new Client({
    host: dbHost,
    port: parseInt(dbPort) || 5432,
    user: dbUser,
    password: dbPassword,
    database: 'postgres', // Se connecter √† la base par d√©faut
    ssl: {
      rejectUnauthorized: false // N√©cessaire pour Render
    }
  });
  
  try {
    await adminClient.connect();
    console.log("‚úÖ Connexion √† PostgreSQL r√©ussie");
    
    // V√©rifier si la base de donn√©es existe
    const dbCheck = await adminClient.query(
      "SELECT 1 FROM pg_database WHERE datname = $1", 
      [dbName]
    );
    
    if (dbCheck.rowCount === 0) {
      console.log(`üèóÔ∏è  Cr√©ation de la base de donn√©es '${dbName}'...`);
      await adminClient.query(`CREATE DATABASE "${dbName}"`);
      console.log("‚úÖ Base de donn√©es cr√©√©e avec succ√®s");
    } else {
      console.log(`‚ÑπÔ∏è  La base de donn√©es '${dbName}' existe d√©j√†`);
    }
    
    await adminClient.end();
    
    // Maintenant se connecter √† la base de donn√©es sp√©cifique
    const dbClient = new Client({
      connectionString: databaseUrl,
      ssl: {
        rejectUnauthorized: false // N√©cessaire pour Render
      }
    });
    
    await dbClient.connect();
    console.log(`‚úÖ Connect√© √† la base de donn√©es '${dbName}'`);
    
    // Cr√©er les tables avec Drizzle
    console.log("üèóÔ∏è  Cr√©ation des tables...");
    const db = drizzle(dbClient, { schema });
    
    // Ex√©cuter les migrations manuellement
    console.log("üèóÔ∏è  Ex√©cution des migrations...");
    await runMigrations(dbClient);
    
    // Fermer la connexion
    await dbClient.end();
    console.log("‚úÖ Initialisation termin√©e avec succ√®s !");
    
  } catch (error) {
    console.error("‚ùå Erreur lors de l'initialisation:", error);
    
    if (error instanceof Error) {
      if (error.message.includes("ECONNREFUSED")) {
        console.log("\nüí° PostgreSQL n'est pas d√©marr√©");
        console.log("   V√©rifiez que le service PostgreSQL est en cours d'ex√©cution");
      } else if (error.message.includes("password authentication failed")) {
        console.log("\nüí° Mot de passe incorrect");
        console.log("   Mettez √† jour le mot de passe dans .env");
      } else if (error.message.includes("SSL/TLS required")) {
        console.log("\nüí° SSL/TLS requis");
        console.log("   La connexion doit utiliser SSL/TLS");
      } else {
        console.log(`\nüí° ${error.message}`);
      }
    }
    
    process.exit(1);
  }
}

async function runMigrations(client: Client) {
  try {
    // Obtenir la liste des fichiers de migration
    // Utiliser process.cwd() pour obtenir le chemin correct dans l'environnement de production
    const migrationsDir = join(process.cwd(), 'server', 'migrations');
    console.log(`üìÅ Chemin des migrations: ${migrationsDir}`);
    
    const files = await readdir(migrationsDir);
    
    // Trier les fichiers par ordre alphab√©tique
    const sortedFiles = files.sort();
    
    console.log(`üìÅ ${sortedFiles.length} fichiers de migration trouv√©s`);
    
    // Ex√©cuter chaque migration
    for (const file of sortedFiles) {
      if (file.endsWith('.ts')) {
        console.log(`‚è≥ Ex√©cution de la migration: ${file}`);
        
        try {
          // Importer dynamiquement le script de migration en utilisant pathToFileURL pour √©viter les probl√®mes Windows
          const migrationPath = join(migrationsDir, file);
          const migrationUrl = pathToFileURL(migrationPath).href;
          const migration = await import(migrationUrl);
          
          // Ex√©cuter la fonction up si elle existe
          if (typeof migration.up === 'function') {
            await migration.up(client);
            console.log(`‚úÖ Migration ${file} termin√©e avec succ√®s`);
          } else {
            console.log(`‚ö†Ô∏è  Aucune fonction 'up' trouv√©e dans ${file}`);
          }
        } catch (error) {
          console.error(`‚ùå Erreur lors de l'ex√©cution de la migration ${file}:`, error);
          throw error;
        }
      }
    }
    
    console.log("‚úÖ Toutes les migrations ont √©t√© ex√©cut√©es avec succ√®s!");
  } catch (error) {
    console.error("‚ùå Erreur lors des migrations:", error);
    throw error;
  }
}

initDatabase().catch(console.error);